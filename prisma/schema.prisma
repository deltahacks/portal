generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  ext_expires_in           Int?
  oauth_token_secret       String?
  oauth_token              String?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String     @id @default(cuid())
  name                 String?
  email                String?    @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  typeform_response_id String?
  role                 Role[]     @default([HACKER])
  hacker               Review[]   @relation("hacker")
  reviewer             Review[]   @relation("reviewer")
  status               Status     @default(IN_REVIEW)
  qrcode               Int?       @unique
  mealsTaken           Int        @default(0)
  lastMealTaken        DateTime?
  EventLog             EventLog[]
}

model Review {
  id         String @id @default(cuid())
  hackerId   String
  reviewerId String
  mark       Float  @default(0)

  hacker   User @relation("hacker", fields: [hackerId], references: [id], onDelete: Cascade)
  reviewer User @relation("reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
}

model EventLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  event     String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  HACKER
  ADMIN
  REVIEWER
  FOOD_MANAGER
  EVENT_MANAGER
  GENERAL_SCANNER
  SPONSER
}

enum Status {
  IN_REVIEW
  REJECTED
  WAITLISTED
  ACCEPTED
  RSVP
  CHECKED_IN
}
