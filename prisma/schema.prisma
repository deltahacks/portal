generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  oauth_token_secret       String?
  oauth_token              String?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  ext_expires_in           BigInt?
  User                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EventLog {
  id        String   @id @default(cuid())
  userId    String
  timestamp DateTime @default(now())
  event     String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id                           String @id @default(cuid())
  hackerId                     String
  reviewerId                   String
  mark                         Float  @default(0.0)
  User_Review_hackerIdToUser   User   @relation("Review_hackerIdToUser", fields: [hackerId], references: [id], onDelete: Cascade)
  User_Review_reviewerIdToUser User   @relation("Review_reviewerIdToUser", fields: [reviewerId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                             String     @id @default(cuid())
  name                           String?
  email                          String?    @unique
  emailVerified                  DateTime?
  image                          String?
  typeform_response_id           String?
  role                           Role[]     @default([HACKER])
  status                         Status     @default(IN_REVIEW)
  qrcode                         BigInt?    @unique
  lastMealTaken                  DateTime?
  mealsTaken                     BigInt     @default(0)
  Account                        Account[]
  EventLog                       EventLog[]
  Review_Review_hackerIdToUser   Review[]   @relation("Review_hackerIdToUser")
  Review_Review_reviewerIdToUser Review[]   @relation("Review_reviewerIdToUser")
  Session                        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  HACKER
  ADMIN
  REVIEWER
  FOOD_MANAGER
  EVENT_MANAGER
  GENERAL_SCANNER
  SPONSER
}

enum Status {
  IN_REVIEW
  REJECTED
  WAITLISTED
  ACCEPTED
  RSVP
  CHECKED_IN
}
