generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./zod"
  useMultipleFiles          = true
  createInputTypes          = false
  createRelationValuesTypes = true
  coerceDate                = true
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  ext_expires_in           Int?
  oauth_token_secret       String?
  oauth_token              String?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String     @id @default(cuid())
  name                 String?
  email                String?    @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  typeform_response_id String?
  role                 Role[]     @default([HACKER])
  hacker               Review[]   @relation("hacker")
  reviewer             Review[]   @relation("reviewer")
  status               Status     @default(IN_REVIEW)
  qrcode               Int?       @unique
  mealsTaken           Int        @default(0) /// @zod.custom.use(z.number().int().default(0))
  lastMealTaken        DateTime?
  EventLog             EventLog[]

  dh10application   DH10Application? @relation(fields: [dH10ApplicationId], references: [id])
  dH10ApplicationId String?          @unique
}

model Review {
  id         String @id @default(cuid())
  hackerId   String
  reviewerId String
  mark       Float  @default(0) /// @zod.custom.use(z.number().default(0))

  hacker   User @relation("hacker", fields: [hackerId], references: [id], onDelete: Cascade)
  reviewer User @relation("reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
}

model EventLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now()) /// @zod.custom.use(z.coerce.date().default(new Date()))
  event     String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  HACKER
  ADMIN
  REVIEWER
  FOOD_MANAGER
  EVENT_MANAGER
  GENERAL_SCANNER
  SPONSER
}

enum Status {
  IN_REVIEW
  REJECTED
  WAITLISTED
  ACCEPTED
  RSVP
  CHECKED_IN
}

/// @zod.import(["import isMobilePhone from 'validator/lib/isMobilePhone'", "import { refineAgeRange, refineWordLength, refineIsTrue, transformStringToNullIfEmpty } from '../../../src/utils/zodValidators'"])
model DH10Application {
  id String @id @default(cuid())

  firstName String /// @zod.string.min(1).max(255)
  lastName  String /// @zod.string.min(1).max(255)

  birthday DateTime /// @zod.custom.use(z.coerce.date().refine((date) => refineAgeRange(date, 13), { message: "You must be at least 13 years old" }))

  studyEnrolledPostSecondary Boolean
  studyLocation              String? /// @zod.string.min(1).max(255)
  studyDegree                String? /// @zod.string.min(1).max(255)
  studyMajor                 String? /// @zod.string.min(1).max(255)
  studyYearOfStudy           String?
  studyExpectedGraduation    DateTime?

  previousHackathonsCount Int /// @zod.custom.use(z.coerce.number().int().min(0))

  longAnswerChange     String /// @zod.custom.use(z.string().min(1, { message: "An answer is required for this question" }).refine((val) => refineWordLength(val, 150), { message: "Must be less than 150 words" }))
  longAnswerExperience String /// @zod.custom.use(z.string().min(1, { message: "An answer is required for this question" }).refine((val) => refineWordLength(val, 150), { message: "Must be less than 150 words" }))
  longAnswerTech       String /// @zod.custom.use(z.string().min(1, { message: "An answer is required for this question" }).refine((val) => refineWordLength(val, 150), { message: "Must be less than 150 words" }))
  longAnswerMagic      String /// @zod.custom.use(z.string().min(1, { message: "An answer is required for this question" }).refine((val) => refineWordLength(val, 150), { message: "Must be less than 150 words" }))

  socialText String? /// @zod.custom.use(z.string().transform(transformStringToNullIfEmpty))
  interests  String? /// @zod.custom.use(z.string().refine((val) => refineWordLength(val, 150), { message: "Must be less than 150 words" }).transform(transformStringToNullIfEmpty))

  linkToResume String?

  tshirtSize      String
  hackerKind      String
  alreadyHaveTeam Boolean
  workshopChoices String[]
  discoverdFrom   String[] /// @zod.string.min(1).max(255).array
  considerCoffee  Boolean
  gender          String
  race            String /// @zod.string.min(1).max(255)
  macEv           Boolean  @default(false) /// @zod.custom.use(z.boolean().default(false))

  emergencyContactName     String /// @zod.string.min(1)
  emergencyContactPhone    String /// @zod.custom.use(z.string().refine(isMobilePhone, { message: "Invalid phone number" }))
  emergencyContactRelation String /// @zod.string.min(1)

  agreeToMLHCodeOfConduct  Boolean /// @zod.custom.use(z.boolean().refine(refineIsTrue, { message: "You must agree to the MLG Code of Conduct"}))
  agreeToMLHPrivacyPolicy  Boolean /// @zod.custom.use(z.boolean().refine(refineIsTrue, { message: "You must agree to the MLG Privacy Policy"}))
  agreeToMLHCommunications Boolean

  User User?
}

model Config {
  id String @id @default(cuid())

  name  String @unique
  value String
}
